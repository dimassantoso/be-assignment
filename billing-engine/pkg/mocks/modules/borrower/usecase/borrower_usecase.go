// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	domain "billing-engine/internal/modules/borrower/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// BorrowerUsecase is an autogenerated mock type for the BorrowerUsecase type
type BorrowerUsecase struct {
	mock.Mock
}

// CreateBorrower provides a mock function with given fields: ctx, data
func (_m *BorrowerUsecase) CreateBorrower(ctx context.Context, data *domain.RequestBorrower) (domain.ResponseBorrower, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateBorrower")
	}

	var r0 domain.ResponseBorrower
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.RequestBorrower) (domain.ResponseBorrower, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.RequestBorrower) domain.ResponseBorrower); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(domain.ResponseBorrower)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.RequestBorrower) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteBorrower provides a mock function with given fields: ctx, id
func (_m *BorrowerUsecase) DeleteBorrower(ctx context.Context, id int) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBorrower")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DelinquentCheck provides a mock function with given fields: ctx, id
func (_m *BorrowerUsecase) DelinquentCheck(ctx context.Context, id int) (domain.ResponseDelinquentCheck, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for DelinquentCheck")
	}

	var r0 domain.ResponseDelinquentCheck
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.ResponseDelinquentCheck, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.ResponseDelinquentCheck); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.ResponseDelinquentCheck)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllBorrower provides a mock function with given fields: ctx, filter
func (_m *BorrowerUsecase) GetAllBorrower(ctx context.Context, filter *domain.FilterBorrower) (domain.ResponseBorrowerList, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for GetAllBorrower")
	}

	var r0 domain.ResponseBorrowerList
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FilterBorrower) (domain.ResponseBorrowerList, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FilterBorrower) domain.ResponseBorrowerList); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(domain.ResponseBorrowerList)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.FilterBorrower) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetDetailBorrower provides a mock function with given fields: ctx, id
func (_m *BorrowerUsecase) GetDetailBorrower(ctx context.Context, id int) (domain.ResponseBorrower, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetDetailBorrower")
	}

	var r0 domain.ResponseBorrower
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.ResponseBorrower, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.ResponseBorrower); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(domain.ResponseBorrower)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateBorrower provides a mock function with given fields: ctx, data
func (_m *BorrowerUsecase) UpdateBorrower(ctx context.Context, data *domain.RequestBorrower) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for UpdateBorrower")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.RequestBorrower) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewBorrowerUsecase creates a new instance of BorrowerUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewBorrowerUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *BorrowerUsecase {
	mock := &BorrowerUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

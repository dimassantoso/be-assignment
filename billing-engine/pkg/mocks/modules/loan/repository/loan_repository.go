// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	candishared "github.com/golangid/candi/candishared"

	domain "billing-engine/internal/modules/loan/domain"

	mock "github.com/stretchr/testify/mock"

	shareddomain "billing-engine/pkg/shared/domain"
)

// LoanRepository is an autogenerated mock type for the LoanRepository type
type LoanRepository struct {
	mock.Mock
}

// Count provides a mock function with given fields: ctx, filter
func (_m *LoanRepository) Count(ctx context.Context, filter *domain.FilterLoan) int {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Count")
	}

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FilterLoan) int); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// FetchAll provides a mock function with given fields: ctx, filter
func (_m *LoanRepository) FetchAll(ctx context.Context, filter *domain.FilterLoan) ([]shareddomain.Loan, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FetchAll")
	}

	var r0 []shareddomain.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FilterLoan) ([]shareddomain.Loan, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FilterLoan) []shareddomain.Loan); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]shareddomain.Loan)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.FilterLoan) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, filter
func (_m *LoanRepository) Find(ctx context.Context, filter *domain.FilterLoan) (shareddomain.Loan, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 shareddomain.Loan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FilterLoan) (shareddomain.Loan, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FilterLoan) shareddomain.Loan); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(shareddomain.Loan)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.FilterLoan) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindDuration provides a mock function with given fields: ctx, filter
func (_m *LoanRepository) FindDuration(ctx context.Context, filter *domain.FilterDuration) (shareddomain.Duration, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for FindDuration")
	}

	var r0 shareddomain.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FilterDuration) (shareddomain.Duration, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FilterDuration) shareddomain.Duration); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(shareddomain.Duration)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.FilterDuration) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, data, updateOptions
func (_m *LoanRepository) Save(ctx context.Context, data *shareddomain.Loan, updateOptions ...candishared.DBUpdateOptionFunc) error {
	_va := make([]interface{}, len(updateOptions))
	for _i := range updateOptions {
		_va[_i] = updateOptions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *shareddomain.Loan, ...candishared.DBUpdateOptionFunc) error); ok {
		r0 = rf(ctx, data, updateOptions...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewLoanRepository creates a new instance of LoanRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoanRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoanRepository {
	mock := &LoanRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

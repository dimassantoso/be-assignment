// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	domain "billing-engine/internal/modules/loan/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// LoanUsecase is an autogenerated mock type for the LoanUsecase type
type LoanUsecase struct {
	mock.Mock
}

// CreateLoan provides a mock function with given fields: ctx, data
func (_m *LoanUsecase) CreateLoan(ctx context.Context, data *domain.RequestLoan) (domain.ResponseLoan, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateLoan")
	}

	var r0 domain.ResponseLoan
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.RequestLoan) (domain.ResponseLoan, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.RequestLoan) domain.ResponseLoan); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(domain.ResponseLoan)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.RequestLoan) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoanOutstanding provides a mock function with given fields: ctx, borrowerID
func (_m *LoanUsecase) GetLoanOutstanding(ctx context.Context, borrowerID int) (domain.ResponseLoanOutstanding, error) {
	ret := _m.Called(ctx, borrowerID)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanOutstanding")
	}

	var r0 domain.ResponseLoanOutstanding
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) (domain.ResponseLoanOutstanding, error)); ok {
		return rf(ctx, borrowerID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) domain.ResponseLoanOutstanding); ok {
		r0 = rf(ctx, borrowerID)
	} else {
		r0 = ret.Get(0).(domain.ResponseLoanOutstanding)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, borrowerID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLoanSimulation provides a mock function with given fields: ctx, data
func (_m *LoanUsecase) GetLoanSimulation(ctx context.Context, data *domain.RequestLoanSimulation) ([]domain.ResponseLoanSimulation, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for GetLoanSimulation")
	}

	var r0 []domain.ResponseLoanSimulation
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.RequestLoanSimulation) ([]domain.ResponseLoanSimulation, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.RequestLoanSimulation) []domain.ResponseLoanSimulation); ok {
		r0 = rf(ctx, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.ResponseLoanSimulation)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.RequestLoanSimulation) error); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLoanUsecase creates a new instance of LoanUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLoanUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *LoanUsecase {
	mock := &LoanUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

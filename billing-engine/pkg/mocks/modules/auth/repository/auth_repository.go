// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	context "context"

	candishared "github.com/golangid/candi/candishared"

	domain "billing-engine/internal/modules/auth/domain"

	mock "github.com/stretchr/testify/mock"

	shareddomain "billing-engine/pkg/shared/domain"
)

// AuthRepository is an autogenerated mock type for the AuthRepository type
type AuthRepository struct {
	mock.Mock
}

// Find provides a mock function with given fields: ctx, filter
func (_m *AuthRepository) Find(ctx context.Context, filter *domain.FilterAuth) (shareddomain.Auth, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for Find")
	}

	var r0 shareddomain.Auth
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FilterAuth) (shareddomain.Auth, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.FilterAuth) shareddomain.Auth); ok {
		r0 = rf(ctx, filter)
	} else {
		r0 = ret.Get(0).(shareddomain.Auth)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.FilterAuth) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, data, updateOptions
func (_m *AuthRepository) Save(ctx context.Context, data *shareddomain.Auth, updateOptions ...candishared.DBUpdateOptionFunc) error {
	_va := make([]interface{}, len(updateOptions))
	for _i := range updateOptions {
		_va[_i] = updateOptions[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, data)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *shareddomain.Auth, ...candishared.DBUpdateOptionFunc) error); ok {
		r0 = rf(ctx, data, updateOptions...)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthRepository creates a new instance of AuthRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthRepository {
	mock := &AuthRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	domain "billing-engine/internal/modules/auth/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// AuthUsecase is an autogenerated mock type for the AuthUsecase type
type AuthUsecase struct {
	mock.Mock
}

// CreateAuth provides a mock function with given fields: ctx, data
func (_m *AuthUsecase) CreateAuth(ctx context.Context, data *domain.RequestAuth) error {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for CreateAuth")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.RequestAuth) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// LoginAuth provides a mock function with given fields: ctx, data
func (_m *AuthUsecase) LoginAuth(ctx context.Context, data *domain.RequestLogin) (domain.ResponseLogin, int, error) {
	ret := _m.Called(ctx, data)

	if len(ret) == 0 {
		panic("no return value specified for LoginAuth")
	}

	var r0 domain.ResponseLogin
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.RequestLogin) (domain.ResponseLogin, int, error)); ok {
		return rf(ctx, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domain.RequestLogin) domain.ResponseLogin); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Get(0).(domain.ResponseLogin)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domain.RequestLogin) int); ok {
		r1 = rf(ctx, data)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, *domain.RequestLogin) error); ok {
		r2 = rf(ctx, data)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewAuthUsecase creates a new instance of AuthUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthUsecase {
	mock := &AuthUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.45.1. DO NOT EDIT.

package mocks

import (
	billingusecase "billing-engine/internal/modules/billing/usecase"
	borrowerusecase "billing-engine/internal/modules/borrower/usecase"

	loanusecase "billing-engine/internal/modules/loan/usecase"

	mock "github.com/stretchr/testify/mock"

	usecase "billing-engine/internal/modules/auth/usecase"
)

// Usecase is an autogenerated mock type for the Usecase type
type Usecase struct {
	mock.Mock
}

// Auth provides a mock function with given fields:
func (_m *Usecase) Auth() usecase.AuthUsecase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Auth")
	}

	var r0 usecase.AuthUsecase
	if rf, ok := ret.Get(0).(func() usecase.AuthUsecase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(usecase.AuthUsecase)
		}
	}

	return r0
}

// Billing provides a mock function with given fields:
func (_m *Usecase) Billing() billingusecase.BillingUsecase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Billing")
	}

	var r0 billingusecase.BillingUsecase
	if rf, ok := ret.Get(0).(func() billingusecase.BillingUsecase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(billingusecase.BillingUsecase)
		}
	}

	return r0
}

// Borrower provides a mock function with given fields:
func (_m *Usecase) Borrower() borrowerusecase.BorrowerUsecase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Borrower")
	}

	var r0 borrowerusecase.BorrowerUsecase
	if rf, ok := ret.Get(0).(func() borrowerusecase.BorrowerUsecase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(borrowerusecase.BorrowerUsecase)
		}
	}

	return r0
}

// Loan provides a mock function with given fields:
func (_m *Usecase) Loan() loanusecase.LoanUsecase {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Loan")
	}

	var r0 loanusecase.LoanUsecase
	if rf, ok := ret.Get(0).(func() loanusecase.LoanUsecase); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(loanusecase.LoanUsecase)
		}
	}

	return r0
}

// NewUsecase creates a new instance of Usecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *Usecase {
	mock := &Usecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
